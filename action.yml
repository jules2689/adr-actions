name: 'Lint ADRs and Generate ADR TOC'
description: 'Lints ADRs on branches and generates the Table of Contents for ADRs on specified'

inputs:
  generate-toc-branches:
    description: 'Branches on which we will generate TOC'
    required: false
    default: "['main','master']"
  adr-dir:
    description: 'Directory of the ADR'
    required: false
    default: ''
  adr-tool-repo:
    description: 'Repo to the ADR Tools. Must be HTTPS url'
    required: false
    default: 'https://github.com/npryce/adr-tools.git'
  adr-tool-version:
    description: 'Version from the ADR Tools Repo'
    required: false
    default: '3.0.0'
  github_token:
    description: 'GitHub token to use to commit to the repo'
    required: false
    default: '' 

runs:
  using: "composite"
  steps:
        
    - name: Set ADR Dir Input
      id: adr-var
      shell: bash
      run: |
        ADR_DIR="${{ inputs.adr-dir }}"
        if [ -z "$ADR_DIR" ] && [ -f .adr-dir ]
        then
          ADR_DIR="$(cat .adr-dir)"
        else
          echo '::error::.adr-dir file doesnt exist, and no adr-dir input was given into the action. Please define one'
          exit 1
        fi
        echo "Setting ADR DIR to $ADR_DIR"
        echo "ADR_DIR=$ADR_DIR" >> "$GITHUB_OUTPUT"

    - name: Extract branch name
      shell: bash
      id: branch
      run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//_/g')" >> "$GITHUB_OUTPUT"

      
    - name: Make sure we dont duplicate ADR numbers
      shell: python
      working-directory: ${{ steps.adr-var.outputs.ADR_DIR }}
      run: |
        print("::group::Duplicate ADR Number Check")
        import glob
        import collections
        markdowns = glob.glob("*.md")
        numbers = map(lambda md: md.split('-')[0], markdowns)
        duplicates = [item for item, count in collections.Counter(numbers).items() if count > 1]
        if len(duplicates) > 0:
          error_message = "::error::ADRs had duplicate numbers: {}".format(duplicates)
          print(error_message)
          print("::endgroup::")
          exit(1)
        else:
          print("No duplicates detected")
          print("::endgroup::")
          exit(0)

    - name: Make sure all ADRs have titles
      shell: python
      working-directory: ${{ steps.adr-var.outputs.ADR_DIR }}
      run: |
        print("::group::ADR Title Check")
        import glob
        import collections
        import re
        markdowns = glob.glob("*.md")
        for md in markdowns:
          if md == "README.md":
            continue
          print("Checking {}".format(md))
          # Get first line of the markdown
          first_line = open(md).readline()
          found_title = re.search(r"^# \d+\.", first_line)
          if found_title == None:
            print("::error::No title found in {}".format(md))
            print("::endgroup::")
            exit(1)
        print("::endgroup::")

    - name: Make sure all ADR numbers match the title
      shell: python
      working-directory: ${{ steps.adr-var.outputs.ADR_DIR }}
      run: |
        print("::group::ADR Title/Number Match Check")
        import glob
        import collections
        import re
        markdowns = glob.glob("*.md")
        for md in markdowns:
          if md == "README.md" or md == ".template.md":
            continue
          print("Checking {}".format(md))
          number = md.split('-')[0]
          number = int(number)
          title = open(md).readline()
          found_title = re.search(r"^# (\d+)\.", title)
          title_number = int(found_title.group(1))
          if number != title_number:
            print("::error:: \ADR number '{}' in the filename '{}' does not match title '{}'".format(number, md, title))
            print("::endgroup::")
            exit(1)
        print("::endgroup::")
    
    - name: Clone ADR Tools
      shell: bash
      run: |
        if [ "${{ contains(fromJSON(inputs.generate-toc-branches), steps.branch.outputs.BRANCH_NAME) }}" != "true" ]; then
          echo "Clone ADR Tools: This step will not run because '${{ steps.branch.outputs.BRANCH_NAME }}' is not in the allow list ${{ inputs.generate-toc-branches }}"
          exit 0
        fi
        echo "::group::Clone ADR Tools"
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
        echo "Cloning ADR tools to $DIR/adr-tools"
        git clone --depth 1 --branch ${{ inputs.adr-tool-version }} --single-branch ${{ inputs.adr-tool-repo }} "$DIR/adr-tools"
        echo "::endgroup::"

    - name: Install Graphviz
      shell: bash
      run: |
        if [ "${{ contains(fromJSON(inputs.generate-toc-branches), steps.branch.outputs.BRANCH_NAME) }}" != "true" ]; then
          echo "Install Graphviz: This step will not run because '${{ steps.branch.outputs.BRANCH_NAME }}' is not in the allow list ${{ inputs.generate-toc-branches }}"
          exit 0
        fi
        echo "::group::Install Graphviz"
        if [[ "$OSTYPE" == "darwin"* ]]; then
          brew install graphviz
        else
          sudo apt-get install graphviz
        fi
        echo "::endgroup::"      

    - name: Run ADR Tools
      shell: bash
      run: |
        if [ "${{ contains(fromJSON(inputs.generate-toc-branches), steps.branch.outputs.BRANCH_NAME) }}" != "true" ]; then
          echo "Run ADR Tools: This step will not run because '${{ steps.branch.outputs.BRANCH_NAME }}' is not in the allow list ${{ inputs.generate-toc-branches }}"
          exit 0
        fi
        echo "::group::Run ADR Tools to generate TOC and graph"
        DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
      
        echo "Changing directory to ${{ steps.adr-var.outputs.ADR_DIR }}"
        pushd ${{ steps.adr-var.outputs.ADR_DIR }}

        # Generate Graph of ADRs
        echo "Generating Graph"
        "$DIR/adr-tools/src/adr" generate graph
        "$DIR/adr-tools/src/adr" generate graph | dot -Tpng > graph.png

        # Add content to README, including generated TOC
        echo "Generating Table of Contents"
        "$DIR/adr-tools/src/adr" generate toc
        echo "<!-- This file is autogenerated by actions, please don't modify it -->" > README.md
        "$DIR/adr-tools/src/adr" generate toc >> README.md
        echo -e '\n\n## Dependency Graph of ADRs\n\n![ADR Graph Dependency](graph.png)' >> README.md
        if [ -f ".template.md" ]; then
          echo -e '\n\n## Adding a new ADR' >> README.md
          echo "There is a [template](./.template.md) you can use to get started. It's intended to be used and modified as needed,
and serves as more of a good starting point for the types of things you may want to capture in the ADR." >> README.md
        fi

        popd
        echo "::endgroup::"

    - name: Commit ADR TOC
      shell: bash
      run: |
        if [ "${{ contains(fromJSON(inputs.generate-toc-branches), steps.branch.outputs.BRANCH_NAME) }}" != "true" ]; then
          echo "Commit ADR TOC: This step will not run because '${{ steps.branch.outputs.BRANCH_NAME }}' is not in the allow list ${{ inputs.generate-toc-branches }}"
          exit 0
        fi
        echo "::group::Commit ADR TOC Changes"
        commit_message='Update ADR TOC'
        repo_auth="${{ github.actor }}:${{ inputs.github_token }}"
        repo_name="${{ github.repository }}"
        ref="${{ github.ref }}"
        adr_dir="${{ steps.adr-var.outputs.ADR_DIR }}/*"
        

        remote_repo="https://${repo_auth}@github.com/${repo_name}.git"

        echo "Committing : ${commit_message}"
        echo "Push ${adr_dir} to branch ${ref} in repo ${remote_repo}"
        echo "=================================="
        echo "Setting Config for Git"
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        echo "=================================="

        if [ -z "$(git status --porcelain)" ]; then 
          echo "Nothing to commit, exiting"
          exit 0
        fi

        git add -f "${adr_dir}"
        git commit -m "${commit_message}"
        git push "${remote_repo}" "HEAD:${ref}" --follow-tags
        echo "::endgroup::"
